using System.Diagnostics;
using Chevron9.Backends.Terminal.Utils;
using Chevron9.Shared.Graphics;

namespace Chevron9.Tests.Backends.Terminal;

/// <summary>
///     Test that verifies ANSI codes generated by AnsiBuilder work in real terminal.
///     This test demonstrates actual ANSI sequences working in a terminal.
/// </summary>
[TestFixture]
[Category("RealTerminalDemo")]
public class AnsiCodesRealTerminalTest
{
    [Test]
    [Explicit("24-bit color test - run manually")]
    public void TrueColor24BitTestInTerminal()
    {
        var builder = new AnsiBuilder();

        var trueColorSequence = builder
            .ClearScreen()
            .CursorPosition(1, 1)
            .FgColorRgb(255, 0, 0).Append("● Pure Red (255,0,0)")
            .CursorPosition(2, 1)
            .FgColorRgb(0, 255, 0).Append("● Pure Green (0,255,0)")
            .CursorPosition(3, 1)
            .FgColorRgb(0, 0, 255).Append("● Pure Blue (0,0,255)")
            .CursorPosition(4, 1)
            .FgColorRgb(255, 255, 0).Append("● Yellow (255,255,0)")
            .CursorPosition(5, 1)
            .FgColorRgb(255, 0, 255).Append("● Magenta (255,0,255)")
            .CursorPosition(6, 1)
            .FgColorRgb(0, 255, 255).Append("● Cyan (0,255,255)")
            .CursorPosition(7, 1)
            .FgColorRgb(255, 165, 0).Append("● Orange (255,165,0)")
            .CursorPosition(8, 1)
            .FgColorRgb(128, 0, 128).Append("● Purple (128,0,128)")
            .CursorPosition(9, 1)
            .FgColorRgb(255, 192, 203).Append("● Pink (255,192,203)")
            .CursorPosition(10, 1)
            .FgColorRgb(0, 128, 0).Append("● Dark Green (0,128,0)")
            .CursorPosition(11, 1)
            .FgColorRgb(139, 69, 19).Append("● Brown (139,69,19)")
            .CursorPosition(12, 1)
            .FgColorRgb(75, 0, 130).Append("● Indigo (75,0,130)")
            .CursorPosition(13, 1)
            .FgColorRgb(255, 215, 0).Append("● Gold (255,215,0)")
            .CursorPosition(14, 1)
            .FgColorRgb(0, 206, 209).Append("● Turquoise (0,206,209)")
            .CursorPosition(15, 1)
            .FgColorRgb(220, 20, 60).Append("● Crimson (220,20,60)")
            .CursorPosition(16, 1)
            .FgColorRgb(255, 255, 255).Append("● White (255,255,255)")
            .CursorPosition(17, 1)
            .FgColorRgb(0, 0, 0).Append("● Black (0,0,0)")
            .CursorPosition(18, 1)
            .FgColorRgb(128, 128, 128).Append("● Gray (128,128,128)")
            .CursorPosition(20, 1)
            .Append("24-bit True Color Test Complete!")
            .Build();

        ExecuteInTerminal(trueColorSequence);
        Assert.That(true, "24-bit true color test executed");
    }

    [Test]
    [Explicit("RGB gradient test - run manually")]
    public void RgbGradientTestInTerminal()
    {
        var builder = new AnsiBuilder();

        var gradientSequence = builder
            .ClearScreen()
            .CursorPosition(1, 1)
            .Append("RGB Gradient Test:")
            .Build();

        // Add gradient lines
        for (int row = 2; row <= 10; row++)
        {
            gradientSequence += builder
                .CursorPosition(row, 1)
                .Build();

            for (int col = 1; col <= 20; col++)
            {
                int r = (col - 1) * 12; // 0-255 range
                int g = 255 - ((col - 1) * 12);
                int b = (row - 2) * 28; // Different blue for each row

                gradientSequence += builder
                    .BgColorRgb(r, g, b)
                    .Append(" ")
                    .Build();
            }
        }

        gradientSequence += builder
            .CursorPosition(12, 1)
            .Reset()
            .Append("True Color RGB Gradient Complete!")
            .Build();

        ExecuteInTerminal(gradientSequence);
        Assert.That(true, "RGB gradient test executed");
    }

    private static void ExecuteInTerminal(string ansiSequence)
    {
        try
        {
            var process = new Process
            {
                StartInfo = new ProcessStartInfo
                {
                    FileName = "printf",
                    Arguments = $"\"{ansiSequence.Replace("\"", "\\\"")}\"",
                    RedirectStandardOutput = false, // Show output in terminal
                    RedirectStandardError = false,
                    UseShellExecute = false,
                    CreateNoWindow = false
                }
            };

            process.Start();
            process.WaitForExit();

            if (process.ExitCode != 0)
            {
                Assert.Fail($"Terminal command failed with exit code: {process.ExitCode}");
            }
        }
        catch (Exception ex)
        {
            Assert.Fail($"Failed to execute in terminal: {ex.Message}");
        }
    }
}
